#!/usr/bin/ash

run_hook() {
    local pw
    modprobe -a -q dm-crypt >/dev/null 2>&1
    [ "${quiet}" = "y" ] && CSQUIET=">/dev/null"

    if [ -z "${cryptdevices}" ]; then
        return 1
    fi

    # Get keyfile if specified
    ckeyfile="/crypto_keyfile.bin"
    if [ -n "$cryptkey" ]; then
        IFS=: read ckdev ckarg1 ckarg2 <<EOF
$cryptkey
EOF

        if [ "$ckdev" = "rootfs" ]; then
            ckeyfile=$ckarg1
        elif resolved=$(resolve_device "${ckdev}" ${rootdelay}); then
            case ${ckarg1} in
                *[!0-9]*)
                    # Use a file on the device
                    # ckarg1 is not numeric: ckarg1=filesystem, ckarg2=path
                    mkdir /ckey
                    mount -r -t "$ckarg1" "$resolved" /ckey
                    dd if="/ckey/$ckarg2" of="$ckeyfile" >/dev/null 2>&1
                    umount /ckey
                    ;;
                *)
                    # Read raw data from the block device
                    # ckarg1 is numeric: ckarg1=offset, ckarg2=length
                    dd if="$resolved" of="$ckeyfile" bs=1 skip="$ckarg1" count="$ckarg2" >/dev/null 2>&1
                    ;;
            esac
        fi
        [ ! -f ${ckeyfile} ] && echo "Keyfile could not be opened. Reverting to passphrase."
    fi

    for devspec in $(echo "${cryptdevices}" | tr ';' '\n'); do
        [ -z "${devspec}" ] && continue
        
        IFS=: read cryptdev cryptname cryptoptions <<EOF
${devspec}
EOF

        # parse options
        cryptargs=""
        for cryptopt in ${cryptoptions//,/ }; do
            case ${cryptopt} in
                allow-discards)
                    cryptargs="${cryptargs} --allow-discards"
                    ;;
                *)
                    echo "Encryption option '${cryptopt}' not known, ignoring" >&2
                    ;;
            esac
        done

        # try to decrypt
        if ! resolved=$(resolve_device "${cryptdev}" ${rootdelay}); then
            err "Device ${cryptdev} could not be resolved. Skipping..."
            continue
        fi

        if ! eval cryptsetup isLuks ${resolved} >/dev/null 2>&1; then
            err "Failed to open device ${cryptdev}: Not a LUKS volume!"
            continue
        fi

        # If keyfile exists, try to use that
        if [ -f ${ckeyfile} ]; then
            if eval cryptsetup --key-file ${ckeyfile} open --type luks ${resolved} ${cryptname} ${cryptargs} ${CSQUIET}; then
                echo "Configured ${cryptname} with keyfile."
            fi
        fi

        while ! [ -e "/dev/mapper/${cryptname}" ]; do
            if [ -z "$pw" ]; then
                echo -n "Enter password for ${cryptname}: "
                read -r -s pw
                echo ""
            fi

            eval cryptsetup open --type luks ${resolved} ${cryptname} ${cryptargs} ${CSQUIET} <<EOF
${pw}
EOF
            if [ $? -eq 0 ]; then
                echo "Configured ${cryptname}."
                break
            else
                pw=""
            fi
        done

        if ! [ -e "/dev/mapper/${cryptname}" ]; then
            err "Password succeeded, but ${cryptname} creation failed, skipping..."
            continue
        fi
    done
}

# vim: set ft=sh ts=4 sw=4 et:
